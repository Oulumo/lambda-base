ext {
    versionMajor = 0
    versionMinor = 14
    versionPoint = 0
}

buildscript {
    ext {
        logbackLoglevel='DEBUG'

        gsonVersion='2.8.0'
        joda_time_version='2.9.4'
        commonsIoVersion='2.5'
        slf4jVersion='1.7.25'
        logbackVersion='1.2.3'
        daggerVersion='2.10'

        awsLambdaCoreVersion='1.1.0'
        awsLambdaEventsVersion='1.3.0'
        awsJavaSdkVersion='1.11.136'

        jUnitVersion='4.12'
        hamcrestVersion='1.3'
    }
    repositories {
	    jcenter()
    }
    dependencies {
        classpath "net.sf.gapt:apt:1"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

allprojects {
    group 'fi.oulumo.lambda'
    version computeVersion()

    repositories {
	    jcenter()
    }
}

subprojects {
    ext {
        asciiDocOutputDir = file("${buildDir}/asciidoc")
    }

    apply plugin: 'maven'
    apply plugin: 'java'
    apply plugin: "net.sf.gapt"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    test {
        testLogging {
            exceptionFormat = 'full'
        }
    }

    compileJava.dependsOn(processResources)

    processResources {
        filesMatching('**/logback.xml') {
            filter {
                it.replace('${logback.loglevel}', logbackLoglevel)
            }
        }
    }
}

configure(subprojects - project(':lambda-base-example')) {
    apply plugin: 'com.jfrog.bintray'

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        from javadoc.destinationDir
        classifier = 'javadoc'
    }

    // Add the sourceJars to non-extractor modules
    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar
    }

    bintray {
        user = "${bintray_user}"
        key = "${bintray_apikey}"
        configurations = ['archives']
        dryRun = !(project.hasProperty('pushBintray'))
        publish = true
        override = true

        pkg {
            repo = 'lambda-base'
            name = "fi.oulumo.lambda:${project.name}"
            desc = "${project.name}"
            labels = ['lambda', 'aws-lambda', 'serverless']
            publicDownloadNumbers = true

            githubRepo = 'Oulumo/lambda-base'
            githubReleaseNotesFile = 'README.adoc'

            version {
                name = computeVersion()
                released  = new Date()
                licenses = ['Apache-2.0']
                websiteUrl = 'https://github.com/Oulumo/lambda-base'
                issueTrackerUrl = 'https://github.com/Oulumo/lambda-base/issues'
                vcsUrl = 'https://github.com/Oulumo/lambda-base.git'
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

def computeVersion() {
    // Version format: <major>.<minor>.<point>.<build>
    return String.format('%d.%d.%d.%d', versionMajor, versionMinor, versionPoint, getBuildNumber())
}

def getBuildNumber() {
    return Integer.valueOf(System.env.BUILD_NUMBER ?: (System.env.BUILDKITE_BUILD_NUMBER ?: 0))
}